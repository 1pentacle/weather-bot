import asyncio
import requests
from datetime import datetime, time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

BOT_TOKEN = "8466883027:AAFF_ty8FP7bE78O2IAsPUDrLk_XqnR7DUM"
YANDEX_API_KEY = "cc6f05e0-ec91-4d06-9f10-597d93877b7a"
CITY_NAME = "–í—è—Ç—Å–∫–∏–µ –ü–æ–ª—è–Ω—ã"
LAT = 56.2284
LON = 51.0648
ADMIN_CHAT_ID = 8181234841  # –¢–≤–æ–π ID –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤

user_state = {}
user_notify_time = {}
user_rain_notify = {}
user_extreme_notify = {}

def get_weekday(date_str: str) -> str:
    dt = datetime.strptime(date_str, "%Y-%m-%d")
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return days[dt.weekday()]

def get_weather_data():
    url = f"https://api.weather.yandex.ru/v2/forecast?lat={LAT}&lon={LON}&lang=ru_RU"
    headers = {"X-Yandex-Weather-Key": YANDEX_API_KEY}
    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        return None
    return response.json()

def get_weather_advice(condition):
    rain_conditions = {"rain", "showers", "drizzle", "moderate-rain", "heavy-rain", "continuous-heavy-rain"}
    snow_conditions = {"snow", "light-snow", "wet-snow", "snow-showers", "hail"}
    thunder_conditions = {"thunderstorm", "thunderstorm-with-rain", "thunderstorm-with-hail"}

    if condition in rain_conditions:
        return "‚òî –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å –∑–æ–Ω—Ç!"
    if condition in snow_conditions:
        return "‚ùÑÔ∏è –û–¥–µ–Ω—å—Ç–µ—Å—å —Ç–µ–ø–ª–µ–µ, –≤–æ–∑–º–æ–∂–µ–Ω —Å–Ω–µ–≥."
    if condition in thunder_conditions:
        return "‚ö° –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –≥—Ä–æ–∑–∞!"
    return ""

def format_part_weather(part):
    conditions_dict = {
        "clear": "–Ø—Å–Ω–æ ‚òÄÔ∏è",
        "partly-cloudy": "–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ üå§",
        "cloudy": "–û–±–ª–∞—á–Ω–æ ‚òÅÔ∏è",
        "overcast": "–ü–∞—Å–º—É—Ä–Ω–æ üå•",
        "drizzle": "–ú–æ—Ä–æ—Å—å üåß",
        "light-rain": "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üå¶",
        "rain": "–î–æ–∂–¥—å üåß",
        "moderate-rain": "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å üåß",
        "heavy-rain": "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåß",
        "continuous-heavy-rain": "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å üåß",
        "showers": "–õ–∏–≤–µ–Ω—å üåß",
        "wet-snow": "–ú–æ–∫—Ä—ã–π —Å–Ω–µ–≥ üå®",
        "light-snow": "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ üå®",
        "snow": "–°–Ω–µ–≥ ‚ùÑÔ∏è",
        "snow-showers": "–°–Ω–µ–∂–Ω—ã–µ –∑–∞—Ä—è–¥—ã ‚ùÑÔ∏è",
        "hail": "–ì—Ä–∞–¥ üå®",
        "thunderstorm": "–ì—Ä–æ–∑–∞ ‚õà",
        "thunderstorm-with-rain": "–î–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π ‚õà",
        "thunderstorm-with-hail": "–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º ‚õà",
    }
    condition = part.get("condition", "unknown")
    desc = conditions_dict.get(condition, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    temp = part.get("temp_avg") or part.get("temp") or "‚Äî"
    humidity = part.get("humidity", "‚Äî")
    wind = part.get("wind_speed", "‚Äî")

    advice = get_weather_advice(condition)
    msg = (
        f"{desc}\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
        f"üå¨ –í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
    )
    if advice:
        msg += advice + "\n"
    return msg

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(CITY_NAME, callback_data="city_vyat")]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã:", reply_markup=markup)
    elif update.callback_query:
        await update.callback_query.message.edit_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã:", reply_markup=markup)
        await update.callback_query.answer()

    user_state[update.effective_chat.id] = None

async def show_forecast_menu(update: Update):
    keyboard = [
        [InlineKeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å üå§Ô∏è", callback_data="forecast_now"),
         InlineKeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è üìÖ", callback_data="forecast_today")],
        [InlineKeyboardButton("–ü–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞ üå•Ô∏è", callback_data="forecast_tomorrow"),
         InlineKeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é üìÜ", callback_data="forecast_week")],
        [InlineKeyboardButton("üïí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notify_menu"),
         InlineKeyboardButton("üìñ –ü–æ–º–æ—â—å", callback_data="help_menu")],
        [InlineKeyboardButton("üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="feedback")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_city")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.edit_text(
        "**–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:**",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    await update.callback_query.answer()

async def show_notify_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in user_rain_notify:
        user_rain_notify[chat_id] = False
    if chat_id not in user_extreme_notify:
        user_extreme_notify[chat_id] = True

    rain_notify = user_rain_notify.get(chat_id, False)
    extreme_notify = user_extreme_notify.get(chat_id, True)
    notify_time = user_notify_time.get(chat_id, None)
    notify_time_str = notify_time.strftime("%H:%M") if notify_time else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

    keyboard = [
        [InlineKeyboardButton(f"{'‚úÖ' if rain_notify else '‚ùå'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–∂–¥–µ ‚òî", callback_data="toggle_rain_notify")],
        [InlineKeyboardButton(f"{'‚úÖ' if extreme_notify else '‚ùå'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –ø–æ–≥–æ–¥–µ ‚ö†Ô∏è", callback_data="toggle_extreme_notify")],
        [InlineKeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="set_notify_time")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="forecast_menu_back")]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.message.edit_text(
        f"**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**\n\n–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notify_time_str}\n",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    await update.callback_query.answer()

async def show_help_menu(update: Update):
    help_text = (
        "üìñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ –í—è—Ç—Å–∫–∏–µ –ü–æ–ª—è–Ω—ã.\n\n"
        "–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:\n"
        "- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞ –∏ –Ω–µ–¥–µ–ª—é.\n"
        "- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–∂–¥–µ –∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –ø–æ–≥–æ–¥–µ.\n"
        "- –£–¥–æ–±–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
        "- –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å.\n"
        "- –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑.\n"
        "- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üïí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è¬ª.\n"
        "- –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ ¬´üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.\n"
        "- –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∫–Ω–æ–ø–∫–æ–π ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª."
    )
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="forecast_menu_back")]]
    markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.edit_text(help_text, parse_mode="Markdown", reply_markup=markup)
    await update.callback_query.answer()

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    chat_id = query.message.chat.id

    if data == "city_vyat":
        user_state[chat_id] = "forecast_menu"
        await show_forecast_menu(update)
    elif data == "back_to_city":
        user_state[chat_id] = None
        await start(update, context)
    elif data == "forecast_now":
        await send_forecast_now(update)
    elif data == "forecast_today":
        await send_forecast_day(update, 0)
    elif data == "forecast_tomorrow":
        await send_forecast_day(update, 1)
    elif data == "forecast_week":
        await send_forecast_week(update)
    elif data == "notify_menu":
        user_state[chat_id] = "notify_menu"
        await show_notify_menu(update, context)
    elif data == "toggle_rain_notify":
        user_rain_notify[chat_id] = not user_rain_notify.get(chat_id, False)
        await query.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–∂–¥–µ {'–≤–∫–ª—é—á–µ–Ω—ã' if user_rain_notify[chat_id] else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}.")
        await show_notify_menu(update, context)
    elif data == "toggle_extreme_notify":
        user_extreme_notify[chat_id] = not user_extreme_notify.get(chat_id, True)
        await query.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –ø–æ–≥–æ–¥–µ {'–≤–∫–ª—é—á–µ–Ω—ã' if user_extreme_notify[chat_id] else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}.")
        await show_notify_menu(update, context)
    elif data == "set_notify_time":
        user_state[chat_id] = "awaiting_notify_time"
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç), –Ω–∞–ø—Ä–∏–º–µ—Ä 08:30")
        await query.answer()
    elif data == "forecast_menu_back":
        user_state[chat_id] = "forecast_menu"
        await show_forecast_menu(update)
    elif data == "help_menu":
        await show_help_menu(update)
    elif data == "feedback":
        user_state[chat_id] = "awaiting_feedback"
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –æ—Ç 1 –¥–æ 5 –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤.")
        await query.answer()
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)

async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    state = user_state.get(chat_id)

    if state == "awaiting_notify_time":
        text = update.message.text.strip()
        try:
            notify_time = datetime.strptime(text, "%H:%M").time()
            user_notify_time[chat_id] = notify_time
            user_state[chat_id] = "forecast_menu"
            await update.message.reply_text(f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {notify_time.strftime('%H:%M')}")
            await show_forecast_menu(update)
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:30.")
    elif state == "awaiting_feedback":
        text = update.message.text.strip()
        feedback_msg = (
            f"üìù –û—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.full_name} "
            f"(@{update.effective_user.username or '–Ω–µ—Ç username'}, ID: {chat_id}):\n\n"
            f"{text}"
        )
        try:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=feedback_msg)
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üôè")
        except Exception:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        user_state[chat_id] = "forecast_menu"
        await show_forecast_menu(update)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

async def send_forecast_now(update: Update):
    data = get_weather_data()
    if not data or "fact" not in data:
        await update.callback_query.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥—ã.")
        return

    fact = data["fact"]
    condition = fact.get("condition", "unknown")
    conditions_dict = {
        "clear": "–Ø—Å–Ω–æ ‚òÄÔ∏è",
        "partly-cloudy": "–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ üå§",
        "cloudy": "–û–±–ª–∞—á–Ω–æ ‚òÅÔ∏è",
        "overcast": "–ü–∞—Å–º—É—Ä–Ω–æ üå•",
        "drizzle": "–ú–æ—Ä–æ—Å—å üåß",
        "light-rain": "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üå¶",
        "rain": "–î–æ–∂–¥—å üåß",
        "moderate-rain": "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å üåß",
        "heavy-rain": "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåß",
        "continuous-heavy-rain": "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å üåß",
        "showers": "–õ–∏–≤–µ–Ω—å üåß",
        "wet-snow": "–ú–æ–∫—Ä—ã–π —Å–Ω–µ–≥ üå®",
        "light-snow": "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ üå®",
        "snow": "–°–Ω–µ–≥ ‚ùÑÔ∏è",
        "snow-showers": "–°–Ω–µ–∂–Ω—ã–µ –∑–∞—Ä—è–¥—ã ‚ùÑÔ∏è",
        "hail": "–ì—Ä–∞–¥ üå®",
        "thunderstorm": "–ì—Ä–æ–∑–∞ ‚õà",
        "thunderstorm-with-rain": "–î–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π ‚õà",
        "thunderstorm-with-hail": "–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º ‚õà",
    }
    desc = conditions_dict.get(condition, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    temp = fact.get("temp", "N/A")
    feels_like = fact.get("feels_like", "N/A")
    humidity = fact.get("humidity", "N/A")
    wind = fact.get("wind_speed", "N/A")
    msg = (
        f"üìç *–ü–æ–≥–æ–¥–∞ –≤ {CITY_NAME} —Å–µ–π—á–∞—Å:*\n"
        f"{desc}\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
        f"üå¨ –í–µ—Ç–µ—Ä: {wind} –º/—Å\n\n"
        f"‚¨ÖÔ∏è –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="forecast_menu_back")]]
    markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.edit_text(msg, parse_mode="Markdown", reply_markup=markup)
    await update.callback_query.answer()

async def send_forecast_day(update: Update, day_index: int):
    data = get_weather_data()
    if not data or "forecasts" not in data:
        await update.callback_query.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥—ã.")
        return

    forecasts = data["forecasts"]
    if day_index >= len(forecasts):
        await update.callback_query.message.edit_text("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    day_forecast = forecasts[day_index]
    date_str = day_forecast.get("date")
    weekday = get_weekday(date_str)

    sunrise = day_forecast.get("sunrise", "‚Äî")
    sunset = day_forecast.get("sunset", "‚Äî")

    parts_order = ["morning", "day", "evening", "night"]
    parts_names = ["–£—Ç—Ä–æ", "–î–µ–Ω—å", "–í–µ—á–µ—Ä", "–ù–æ—á—å"]

    msg = f"üìÖ *–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {CITY_NAME} –Ω–∞ {date_str} ({weekday}):*\n"
    msg += f"üåÖ –†–∞—Å—Å–≤–µ—Ç: {sunrise}\n"
    msg += f"üåá –ó–∞–∫–∞—Ç: {sunset}\n"

    parts = day_forecast.get("parts", {})

    for part_key, part_name in zip(parts_order, parts_names):
        part = parts.get(part_key)
        if not part:
            continue
        msg += f"\n*{part_name}:*\n"
        msg += format_part_weather(part)

    msg += "\n‚¨ÖÔ∏è –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="forecast_menu_back")]]
    markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.edit_text(msg, parse_mode="Markdown", reply_markup=markup)
    await update.callback_query.answer()

async def send_forecast_week(update: Update):
    data = get_weather_data()
    if not data or "forecasts" not in data:
        await update.callback_query.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥—ã.")
        return

    forecasts = data["forecasts"]
    if not forecasts:
        await update.callback_query.message.edit_text("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    msg = f"üìÖ *–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {CITY_NAME} –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n"

    for day in forecasts[:7]:
        date_str = day.get("date")
        weekday = get_weekday(date_str)
        parts = day.get("parts", {})
        day_part = parts.get("day")
        temp_day = day_part.get("temp_avg") if day_part else "‚Äî"
        condition = day_part.get("condition") if day_part else "unknown"

        conditions_dict = {
            "clear": "–Ø—Å–Ω–æ ‚òÄÔ∏è",
            "partly-cloudy": "–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ üå§",
            "cloudy": "–û–±–ª–∞—á–Ω–æ ‚òÅÔ∏è",
            "overcast": "–ü–∞—Å–º—É—Ä–Ω–æ üå•",
            "drizzle": "–ú–æ—Ä–æ—Å—å üåß",
            "light-rain": "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üå¶",
            "rain": "–î–æ–∂–¥—å üåß",
            "moderate-rain": "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å üåß",
            "heavy-rain": "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåß",
            "continuous-heavy-rain": "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å üåß",
            "showers": "–õ–∏–≤–µ–Ω—å üåß",
            "wet-snow": "–ú–æ–∫—Ä—ã–π —Å–Ω–µ–≥ üå®",
            "light-snow": "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ üå®",
            "snow": "–°–Ω–µ–≥ ‚ùÑÔ∏è",
            "snow-showers": "–°–Ω–µ–∂–Ω—ã–µ –∑–∞—Ä—è–¥—ã ‚ùÑÔ∏è",
            "hail": "–ì—Ä–∞–¥ üå®",
            "thunderstorm": "–ì—Ä–æ–∑–∞ ‚õà",
            "thunderstorm-with-rain": "–î–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π ‚õà",
            "thunderstorm-with-hail": "–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º ‚õà",
        }
        desc = conditions_dict.get(condition, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        msg += f"\n{date_str} ({weekday}): {desc}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–Ω—ë–º {temp_day}¬∞C"

    msg += "\n\n‚¨ÖÔ∏è –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="forecast_menu_back")]]
    markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.edit_text(msg, parse_mode="Markdown", reply_markup=markup)
    await update.callback_query.answer()


# --- –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
async def notify_users(app):
    while True:
        now = datetime.now().time().replace(second=0, microsecond=0)
        for chat_id, notify_time in user_notify_time.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–¥–Ω–∞ –∏–∑ –¥–≤—É—Ö)
            rain_enabled = user_rain_notify.get(chat_id, False)
            extreme_enabled = user_extreme_notify.get(chat_id, True)

            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º
            if notify_time == now:
                data = get_weather_data()
                if not data or "fact" not in data:
                    continue
                fact = data["fact"]
                condition = fact.get("condition", "unknown")
                temp = fact.get("temp", "N/A")
                humidity = fact.get("humidity", "N/A")
                wind = fact.get("wind_speed", "N/A")

                conditions_dict = {
                    "clear": "–Ø—Å–Ω–æ ‚òÄÔ∏è",
                    "partly-cloudy": "–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ üå§",
                    "cloudy": "–û–±–ª–∞—á–Ω–æ ‚òÅÔ∏è",
                    "overcast": "–ü–∞—Å–º—É—Ä–Ω–æ üå•",
                    "drizzle": "–ú–æ—Ä–æ—Å—å üåß",
                    "light-rain": "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üå¶",
                    "rain": "–î–æ–∂–¥—å üåß",
                    "moderate-rain": "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å üåß",
                    "heavy-rain": "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåß",
                    "continuous-heavy-rain": "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å üåß",
                    "showers": "–õ–∏–≤–µ–Ω—å üåß",
                    "wet-snow": "–ú–æ–∫—Ä—ã–π —Å–Ω–µ–≥ üå®",
                    "light-snow": "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ üå®",
                    "snow": "–°–Ω–µ–≥ ‚ùÑÔ∏è",
                    "snow-showers": "–°–Ω–µ–∂–Ω—ã–µ –∑–∞—Ä—è–¥—ã ‚ùÑÔ∏è",
                    "hail": "–ì—Ä–∞–¥ üå®",
                    "thunderstorm": "–ì—Ä–æ–∑–∞ ‚õà",
                    "thunderstorm-with-rain": "–î–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π ‚õà",
                    "thunderstorm-with-hail": "–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º ‚õà",
                }
                desc = conditions_dict.get(condition, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

                messages = []

                if rain_enabled:
                    rain_conditions = {"rain", "showers", "drizzle", "moderate-rain", "heavy-rain", "continuous-heavy-rain"}
                    if condition in rain_conditions:
                        messages.append(f"‚òî *–í–Ω–∏–º–∞–Ω–∏–µ! –î–æ–∂–¥—å –≤ {CITY_NAME}*\n{desc}\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\nüå¨ –í–µ—Ç–µ—Ä: {wind} –º/—Å\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å –∑–æ–Ω—Ç!")

                if extreme_enabled:
                    extreme_conditions = {"hail", "thunderstorm", "thunderstorm-with-rain", "thunderstorm-with-hail"}
                    if condition in extreme_conditions:
                        messages.append(f"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ! –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –≤ {CITY_NAME}*\n{desc}\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\nüå¨ –í–µ—Ç–µ—Ä: {wind} –º/—Å\n–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!")

                if messages:
                    try:
                        for msg in messages:
                            await app.bot.send_message(chat_id=chat_id, text=msg, parse_mode="Markdown")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

        # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(60)


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", start))
    app.add_handler(CommandHandler("menu", start))

    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, callback=text_message_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async def on_startup(app):
        asyncio.create_task(notify_users(app))
    app.post_init = on_startup

    app.run_polling()

if __name__ == "__main__":
    main()